/*
    ===========================
    SQL to Create Student Table
    ===========================
    CREATE DATABASE aman_db;

    USE aman_db;

    CREATE TABLE Student (
        StudentID INT PRIMARY KEY,
        Name VARCHAR(100),
        Department VARCHAR(100),
        Marks DOUBLE
    );
*/

import java.sql.*;
import java.util.*;

// ----------------------------
// MODEL CLASS
// ----------------------------
class Student {
    int studentID;
    String name;
    String department;
    double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }
}

// ----------------------------
// CONTROLLER CLASS
// ----------------------------
class StudentController {
    final String URL = "jdbc:mysql://localhost:3306/aman_db";
    final String USER = "root"; // Change to your MySQL username
    final String PASSWORD = "123456"; // Change to your MySQL password

    Connection conn;

    public StudentController() throws Exception {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection(URL, USER, PASSWORD);
        conn.setAutoCommit(false); // Enable transaction
    }

    public void createStudent(Student s) {
        String query = "INSERT INTO Student VALUES (?, ?, ?, ?)";
        try (PreparedStatement pst = conn.prepareStatement(query)) {
            pst.setInt(1, s.studentID);
            pst.setString(2, s.name);
            pst.setString(3, s.department);
            pst.setDouble(4, s.marks);
            pst.executeUpdate();
            conn.commit();
            System.out.println("Student record created.");
        } catch (SQLException e) {
            try { conn.rollback(); } catch (SQLException ex) {}
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void readStudents() {
        String query = "SELECT * FROM Student";
        try (Statement st = conn.createStatement();
             ResultSet rs = st.executeQuery(query)) {
            System.out.println("StudentID | Name | Department | Marks");
            while (rs.next()) {
                System.out.println(rs.getInt(1) + " | " +
                                   rs.getString(2) + " | " +
                                   rs.getString(3) + " | " +
                                   rs.getDouble(4));
            }
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void updateStudent(Student s) {
        String query = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (PreparedStatement pst = conn.prepareStatement(query)) {
            pst.setString(1, s.name);
            pst.setString(2, s.department);
            pst.setDouble(3, s.marks);
            pst.setInt(4, s.studentID);
            int rows = pst.executeUpdate();
            if (rows > 0) {
                conn.commit();
                System.out.println("Student updated.");
            } else {
                System.out.println("Student not found.");
            }
        } catch (SQLException e) {
            try { conn.rollback(); } catch (SQLException ex) {}
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void deleteStudent(int studentID) {
        String query = "DELETE FROM Student WHERE StudentID=?";
        try (PreparedStatement pst = conn.prepareStatement(query)) {
            pst.setInt(1, studentID);
            int rows = pst.executeUpdate();
            if (rows > 0) {
                conn.commit();
                System.out.println("Student deleted.");
            } else {
                System.out.println("Student ID not found.");
            }
        } catch (SQLException e) {
            try { conn.rollback(); } catch (SQLException ex) {}
            System.out.println("Error: " + e.getMessage());
        }
    }
}

// ----------------------------
// VIEW / MAIN CLASS
// ----------------------------
public class StudentMVC {
    public static void main(String[] args) {
        try {
            StudentController controller = new StudentController();
            Scanner sc = new Scanner(System.in);

            while (true) {
                System.out.println("\n--- STUDENT MENU ---");
                System.out.println("1. Add Student");
                System.out.println("2. View Students");
                System.out.println("3. Update Student");
                System.out.println("4. Delete Student");
                System.out.println("5. Exit");
                System.out.print("Enter choice: ");
                int ch = sc.nextInt();

                switch (ch) {
                    case 1 -> {
                        System.out.print("Enter Student ID: ");
                        int id = sc.nextInt();
                        sc.nextLine();
                        System.out.print("Enter Name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter Department: ");
                        String dept = sc.nextLine();
                        System.out.print("Enter Marks: ");
                        double marks = sc.nextDouble();

                        Student s = new Student(id, name, dept, marks);
                        controller.createStudent(s);
                    }

                    case 2 -> controller.readStudents();

                    case 3 -> {
                        System.out.print("Enter Student ID to Update: ");
                        int id = sc.nextInt();
                        sc.nextLine();
                        System.out.print("Enter New Name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter New Department: ");
                        String dept = sc.nextLine();
                        System.out.print("Enter New Marks: ");
                        double marks = sc.nextDouble();

                        Student s = new Student(id, name, dept, marks);
                        controller.updateStudent(s);
                    }

                    case 4 -> {
                        System.out.print("Enter Student ID to Delete: ");
                        int id = sc.nextInt();
                        controller.deleteStudent(id);
                    }

                    case 5 -> {
                        System.out.println("Exiting...");
                        System.exit(0);
                    }

                    default -> System.out.println("Invalid choice!");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
